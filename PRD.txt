
产品需求文档 (PRD) - 在线学习与作业管理平台

1. 项目概述

1.1 项目背景
为了提升学员的学习效率和教学管理的自动化水平，我们计划开发一个在线学习与作业管理平台。该平台旨在为学员提供一个便捷的作业提交、查询及反馈渠道，同时利用人工智能技术（豆包大模型）实现作业的自动批改，并通过工作流引擎（Dify）自动化毕业资格的审核。项目将利用Supabase作为后端数据库，并部署在Netlify上，以实现快速、稳定的服务。

1.2 目标用户

学员： 需要提交作业、查询批改结果并了解自己是否达到毕业标准的在册学员。

管理员/教师 (隐性用户)： 需要管理学员信息、作业列表以及查看整体作业提交与批改情况的管理人员。

1.3 核心目标

学员侧：

简化作业提交流程，提升用户体验。

提供透明、即时的作业批改反馈。

明确展示毕业资格审核结果。

管理侧：

实现作业批改的自动化，减轻教师负担。

实现毕业资格审核的自动化，提高效率和准确性。

通过结构化的数据存储，方便后续的数据分析与管理。

2. 功能需求

2.1 学员功能模块

2.1.1 首页/主面板
学员访问网站后，将看到一个清晰的导航主页，包含以下几个核心功能入口：

提交作业： 跳转至作业提交表单页面。

查询我的作业： 跳转至历史作业列表及批改结果页面。

查询毕业资格： 显示当前的毕业资格审核状态。

2.1.2 作业提交
这是一个核心功能，旨在为学员提供智能化的提交流程。

表单设计：

学号输入： 学员输入自己的学号。

联动功能： 系统根据输入的学号，自动从“学员名单表”中匹配并显示学员姓名，此字段不可修改。

学习天数选择： 提供下拉菜单，供学员选择“第几天”的学习内容。

作业选择：

联动功能： 根据所选的学习天数，系统自动从“作业清单表”中筛选并加载当天对应的所有作业项，供学员在下拉菜单中选择。

作业详情显示：

联动功能： 学员选择具体的作业项后，页面自动显示该作业的详细信息，包括：

作业类型： “必做”或“选做”。

作业要求： 详细的文字描述或说明。

附件上传：

提供一个文件上传控件，支持学员上传多张图片作为作业附件。

上传后应有清晰的列表显示已上传的文件名。

提交按钮： 点击“提交”按钮，将作业信息和附件提交至系统。

提交流程与状态反馈：

提交后，该条作业记录的状态在前端应立即显示为 “批改中”。

系统后端将附件图片发送至 豆包识图大模型API 进行处理和批改。

批改完成后，系统应能快速地将结果反馈给学员，学员可以在“查询我的作业”页面看到更新后的状态。

2.1.3 查询我的作业
此页面用于展示学员所有提交过的作业历史。

列表展示： 以列表或卡片的形式清晰展示每一条提交记录，包含以下信息：

提交日期

学习天数

作业名称

批改状态/结果：

批改中： 作业已提交，正在等待AI批改。

合格： 作业已批改且符合要求。

不合格： 作业未达到要求。

批改详情/评语 (可选)： 如果AI模型能返回具体评语，则一并展示。

操作功能 (针对“不合格”作业)：

对于状态为“不合格”的作业，学员应有权进行 “修改” 或 “重新提交”。

点击修改后，允许学员删除之前提交的附件并上传新的附件，然后再次提交。

2.1.4 查询毕业资格
提供一个简单直接的查询接口。

查询触发： 学员点击首页的“查询毕业资格”按钮。

后端处理：

系统根据该学员的学号，调用 Dify工作流。

该工作流的逻辑为：查询“作业提交审核表”，判断该学员所有“必做”作业是否均已达到“合格”状态。

结果显示： 在页面上向学员清晰地展示审核结果，例如：

“恭喜您，已满足所有毕业条件！”

“尚未满足毕业条件，请检查并完成所有必做作业。”

2.2 管理与后端模块

2.2.1 数据库 (Supabase)
项目将使用Supabase作为后端数据库服务，包含以下三个核心表格：

学员名单表 (students)：

student_id (学号, 主键)

student_name (姓名)

其他学员基本信息...

作业清单表 (assignments)：

assignment_id (作业ID, 主键)

day_number (第几天)

assignment_title (作业标题)

is_mandatory (是否必做, 布尔值)

description (详细作业要求)

作业提交审核表 (submissions)：

submission_id (提交ID, 主键)

student_id (学号, 外键关联学员表)

assignment_id (作业ID, 外键关联作业清单表)

submission_date (提交时间)

attachments_url (附件存储链接, 数组或JSON格式)

status (状态, 如: "批改中", "合格", "不合格")

feedback (批改评语, 可选)

2.2.2 智能批改 (豆包大模型)

集成方式： 当学员提交作业后，后端服务需调用豆包识图大模型的API。

数据流： 将作业图片附件发送给API，并接收返回的批改结果（如：是否合格，相关评语等）。

结果处理： 将API返回的结果更新到“作业提交审核表”中对应记录的status和feedback字段。

2.2.3 毕业资格判断 (Dify工作流)

工作流设计： 在Dify平台上设计一个工作流。

触发条件： 由前端“查询毕业资格”功能触发。

执行逻辑：

接收学号作为输入参数。

查询Supabase的“作业清单表”，获取所有is_mandatory为true的作业列表。

查询Supabase的“作业提交审核表”，获取该学号所有status为合格的作业列表。

比较两个列表，判断是否所有必做作业都已合格。

返回最终的判断结果（“合格”或“不合格”）。

2.3 可选功能

表格查看权限： 虽然正常流程中学员不可见，但可以为管理员或特定角色的用户提供一个直接查看和管理这三个Supabase表格的前端界面。

3. 非功能性需求

3.1 部署

平台： 整个网站项目需要成功部署到 Netlify 平台，并能够通过公开的URL访问。

3.2 性能

页面加载： 页面加载速度应尽可能快，尤其是在进行数据库联动查询时，应避免长时间的等待。

API响应： 调用豆包大模型和Dify工作流的响应时间应在用户可接受的范围内，并提供明确的“加载中”或“批改中”的状态提示。

3.3 用户体验与界面 (UI/UX)

界面简洁： 设计应简洁明了，易于操作。

引导清晰： 各项功能操作应有清晰的指引，减少用户的学习成本。

响应式设计： 网站应能良好地适配不同尺寸的设备（如桌面电脑、平板、手机）。

3.4 安全性

数据隔离： 学员只能查询和修改自己提交的作业，不能查看他人的作业信息。

API密钥保护： 豆包大模型、Dify和Supabase的API密钥不应暴露在前端代码中，需通过后端服务或Netlify的后台功能进行安全管理。